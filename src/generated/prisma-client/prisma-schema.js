module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.32.0). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateLink {
  count: Int!
}

type AggregateRating {
  count: Int!
}

type AggregateSkill {
  count: Int!
}

type AggregateTrade {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateVote {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Link {
  id: ID!
  description: String!
  url: String!
  postedBy: User
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote!]
}

type LinkConnection {
  pageInfo: PageInfo!
  edges: [LinkEdge]!
  aggregate: AggregateLink!
}

input LinkCreateInput {
  id: ID
  description: String!
  url: String!
  postedBy: UserCreateOneWithoutLinksInput
  votes: VoteCreateManyWithoutLinkInput
}

input LinkCreateManyWithoutPostedByInput {
  create: [LinkCreateWithoutPostedByInput!]
  connect: [LinkWhereUniqueInput!]
}

input LinkCreateOneWithoutVotesInput {
  create: LinkCreateWithoutVotesInput
  connect: LinkWhereUniqueInput
}

input LinkCreateWithoutPostedByInput {
  id: ID
  description: String!
  url: String!
  votes: VoteCreateManyWithoutLinkInput
}

input LinkCreateWithoutVotesInput {
  id: ID
  description: String!
  url: String!
  postedBy: UserCreateOneWithoutLinksInput
}

type LinkEdge {
  node: Link!
  cursor: String!
}

enum LinkOrderByInput {
  id_ASC
  id_DESC
  description_ASC
  description_DESC
  url_ASC
  url_DESC
}

type LinkPreviousValues {
  id: ID!
  description: String!
  url: String!
}

input LinkScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  AND: [LinkScalarWhereInput!]
  OR: [LinkScalarWhereInput!]
  NOT: [LinkScalarWhereInput!]
}

type LinkSubscriptionPayload {
  mutation: MutationType!
  node: Link
  updatedFields: [String!]
  previousValues: LinkPreviousValues
}

input LinkSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LinkWhereInput
  AND: [LinkSubscriptionWhereInput!]
  OR: [LinkSubscriptionWhereInput!]
  NOT: [LinkSubscriptionWhereInput!]
}

input LinkUpdateInput {
  description: String
  url: String
  postedBy: UserUpdateOneWithoutLinksInput
  votes: VoteUpdateManyWithoutLinkInput
}

input LinkUpdateManyDataInput {
  description: String
  url: String
}

input LinkUpdateManyMutationInput {
  description: String
  url: String
}

input LinkUpdateManyWithoutPostedByInput {
  create: [LinkCreateWithoutPostedByInput!]
  delete: [LinkWhereUniqueInput!]
  connect: [LinkWhereUniqueInput!]
  set: [LinkWhereUniqueInput!]
  disconnect: [LinkWhereUniqueInput!]
  update: [LinkUpdateWithWhereUniqueWithoutPostedByInput!]
  upsert: [LinkUpsertWithWhereUniqueWithoutPostedByInput!]
  deleteMany: [LinkScalarWhereInput!]
  updateMany: [LinkUpdateManyWithWhereNestedInput!]
}

input LinkUpdateManyWithWhereNestedInput {
  where: LinkScalarWhereInput!
  data: LinkUpdateManyDataInput!
}

input LinkUpdateOneRequiredWithoutVotesInput {
  create: LinkCreateWithoutVotesInput
  update: LinkUpdateWithoutVotesDataInput
  upsert: LinkUpsertWithoutVotesInput
  connect: LinkWhereUniqueInput
}

input LinkUpdateWithoutPostedByDataInput {
  description: String
  url: String
  votes: VoteUpdateManyWithoutLinkInput
}

input LinkUpdateWithoutVotesDataInput {
  description: String
  url: String
  postedBy: UserUpdateOneWithoutLinksInput
}

input LinkUpdateWithWhereUniqueWithoutPostedByInput {
  where: LinkWhereUniqueInput!
  data: LinkUpdateWithoutPostedByDataInput!
}

input LinkUpsertWithoutVotesInput {
  update: LinkUpdateWithoutVotesDataInput!
  create: LinkCreateWithoutVotesInput!
}

input LinkUpsertWithWhereUniqueWithoutPostedByInput {
  where: LinkWhereUniqueInput!
  update: LinkUpdateWithoutPostedByDataInput!
  create: LinkCreateWithoutPostedByInput!
}

input LinkWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  postedBy: UserWhereInput
  votes_every: VoteWhereInput
  votes_some: VoteWhereInput
  votes_none: VoteWhereInput
  AND: [LinkWhereInput!]
  OR: [LinkWhereInput!]
  NOT: [LinkWhereInput!]
}

input LinkWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createLink(data: LinkCreateInput!): Link!
  updateLink(data: LinkUpdateInput!, where: LinkWhereUniqueInput!): Link
  updateManyLinks(data: LinkUpdateManyMutationInput!, where: LinkWhereInput): BatchPayload!
  upsertLink(where: LinkWhereUniqueInput!, create: LinkCreateInput!, update: LinkUpdateInput!): Link!
  deleteLink(where: LinkWhereUniqueInput!): Link
  deleteManyLinks(where: LinkWhereInput): BatchPayload!
  createRating(data: RatingCreateInput!): Rating!
  updateRating(data: RatingUpdateInput!, where: RatingWhereUniqueInput!): Rating
  updateManyRatings(data: RatingUpdateManyMutationInput!, where: RatingWhereInput): BatchPayload!
  upsertRating(where: RatingWhereUniqueInput!, create: RatingCreateInput!, update: RatingUpdateInput!): Rating!
  deleteRating(where: RatingWhereUniqueInput!): Rating
  deleteManyRatings(where: RatingWhereInput): BatchPayload!
  createSkill(data: SkillCreateInput!): Skill!
  updateSkill(data: SkillUpdateInput!, where: SkillWhereUniqueInput!): Skill
  updateManySkills(data: SkillUpdateManyMutationInput!, where: SkillWhereInput): BatchPayload!
  upsertSkill(where: SkillWhereUniqueInput!, create: SkillCreateInput!, update: SkillUpdateInput!): Skill!
  deleteSkill(where: SkillWhereUniqueInput!): Skill
  deleteManySkills(where: SkillWhereInput): BatchPayload!
  createTrade(data: TradeCreateInput!): Trade!
  updateTrade(data: TradeUpdateInput!, where: TradeWhereUniqueInput!): Trade
  upsertTrade(where: TradeWhereUniqueInput!, create: TradeCreateInput!, update: TradeUpdateInput!): Trade!
  deleteTrade(where: TradeWhereUniqueInput!): Trade
  deleteManyTrades(where: TradeWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createVote(data: VoteCreateInput!): Vote!
  updateVote(data: VoteUpdateInput!, where: VoteWhereUniqueInput!): Vote
  upsertVote(where: VoteWhereUniqueInput!, create: VoteCreateInput!, update: VoteUpdateInput!): Vote!
  deleteVote(where: VoteWhereUniqueInput!): Vote
  deleteManyVotes(where: VoteWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  link(where: LinkWhereUniqueInput!): Link
  links(where: LinkWhereInput, orderBy: LinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Link]!
  linksConnection(where: LinkWhereInput, orderBy: LinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LinkConnection!
  rating(where: RatingWhereUniqueInput!): Rating
  ratings(where: RatingWhereInput, orderBy: RatingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Rating]!
  ratingsConnection(where: RatingWhereInput, orderBy: RatingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RatingConnection!
  skill(where: SkillWhereUniqueInput!): Skill
  skills(where: SkillWhereInput, orderBy: SkillOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Skill]!
  skillsConnection(where: SkillWhereInput, orderBy: SkillOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SkillConnection!
  trade(where: TradeWhereUniqueInput!): Trade
  trades(where: TradeWhereInput, orderBy: TradeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Trade]!
  tradesConnection(where: TradeWhereInput, orderBy: TradeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TradeConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  vote(where: VoteWhereUniqueInput!): Vote
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote]!
  votesConnection(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VoteConnection!
  node(id: ID!): Node
}

type Rating {
  id: ID!
  score: Int!
  author: User!
  description: String
  subject: User!
}

type RatingConnection {
  pageInfo: PageInfo!
  edges: [RatingEdge]!
  aggregate: AggregateRating!
}

input RatingCreateInput {
  id: ID
  score: Int!
  author: UserCreateOneWithoutAuthorOfInput!
  description: String
  subject: UserCreateOneWithoutRatingsInput!
}

input RatingCreateManyWithoutAuthorInput {
  create: [RatingCreateWithoutAuthorInput!]
  connect: [RatingWhereUniqueInput!]
}

input RatingCreateManyWithoutSubjectInput {
  create: [RatingCreateWithoutSubjectInput!]
  connect: [RatingWhereUniqueInput!]
}

input RatingCreateWithoutAuthorInput {
  id: ID
  score: Int!
  description: String
  subject: UserCreateOneWithoutRatingsInput!
}

input RatingCreateWithoutSubjectInput {
  id: ID
  score: Int!
  author: UserCreateOneWithoutAuthorOfInput!
  description: String
}

type RatingEdge {
  node: Rating!
  cursor: String!
}

enum RatingOrderByInput {
  id_ASC
  id_DESC
  score_ASC
  score_DESC
  description_ASC
  description_DESC
}

type RatingPreviousValues {
  id: ID!
  score: Int!
  description: String
}

input RatingScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  score: Int
  score_not: Int
  score_in: [Int!]
  score_not_in: [Int!]
  score_lt: Int
  score_lte: Int
  score_gt: Int
  score_gte: Int
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  AND: [RatingScalarWhereInput!]
  OR: [RatingScalarWhereInput!]
  NOT: [RatingScalarWhereInput!]
}

type RatingSubscriptionPayload {
  mutation: MutationType!
  node: Rating
  updatedFields: [String!]
  previousValues: RatingPreviousValues
}

input RatingSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RatingWhereInput
  AND: [RatingSubscriptionWhereInput!]
  OR: [RatingSubscriptionWhereInput!]
  NOT: [RatingSubscriptionWhereInput!]
}

input RatingUpdateInput {
  score: Int
  author: UserUpdateOneRequiredWithoutAuthorOfInput
  description: String
  subject: UserUpdateOneRequiredWithoutRatingsInput
}

input RatingUpdateManyDataInput {
  score: Int
  description: String
}

input RatingUpdateManyMutationInput {
  score: Int
  description: String
}

input RatingUpdateManyWithoutAuthorInput {
  create: [RatingCreateWithoutAuthorInput!]
  delete: [RatingWhereUniqueInput!]
  connect: [RatingWhereUniqueInput!]
  set: [RatingWhereUniqueInput!]
  disconnect: [RatingWhereUniqueInput!]
  update: [RatingUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [RatingUpsertWithWhereUniqueWithoutAuthorInput!]
  deleteMany: [RatingScalarWhereInput!]
  updateMany: [RatingUpdateManyWithWhereNestedInput!]
}

input RatingUpdateManyWithoutSubjectInput {
  create: [RatingCreateWithoutSubjectInput!]
  delete: [RatingWhereUniqueInput!]
  connect: [RatingWhereUniqueInput!]
  set: [RatingWhereUniqueInput!]
  disconnect: [RatingWhereUniqueInput!]
  update: [RatingUpdateWithWhereUniqueWithoutSubjectInput!]
  upsert: [RatingUpsertWithWhereUniqueWithoutSubjectInput!]
  deleteMany: [RatingScalarWhereInput!]
  updateMany: [RatingUpdateManyWithWhereNestedInput!]
}

input RatingUpdateManyWithWhereNestedInput {
  where: RatingScalarWhereInput!
  data: RatingUpdateManyDataInput!
}

input RatingUpdateWithoutAuthorDataInput {
  score: Int
  description: String
  subject: UserUpdateOneRequiredWithoutRatingsInput
}

input RatingUpdateWithoutSubjectDataInput {
  score: Int
  author: UserUpdateOneRequiredWithoutAuthorOfInput
  description: String
}

input RatingUpdateWithWhereUniqueWithoutAuthorInput {
  where: RatingWhereUniqueInput!
  data: RatingUpdateWithoutAuthorDataInput!
}

input RatingUpdateWithWhereUniqueWithoutSubjectInput {
  where: RatingWhereUniqueInput!
  data: RatingUpdateWithoutSubjectDataInput!
}

input RatingUpsertWithWhereUniqueWithoutAuthorInput {
  where: RatingWhereUniqueInput!
  update: RatingUpdateWithoutAuthorDataInput!
  create: RatingCreateWithoutAuthorInput!
}

input RatingUpsertWithWhereUniqueWithoutSubjectInput {
  where: RatingWhereUniqueInput!
  update: RatingUpdateWithoutSubjectDataInput!
  create: RatingCreateWithoutSubjectInput!
}

input RatingWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  score: Int
  score_not: Int
  score_in: [Int!]
  score_not_in: [Int!]
  score_lt: Int
  score_lte: Int
  score_gt: Int
  score_gte: Int
  author: UserWhereInput
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  subject: UserWhereInput
  AND: [RatingWhereInput!]
  OR: [RatingWhereInput!]
  NOT: [RatingWhereInput!]
}

input RatingWhereUniqueInput {
  id: ID
}

type Skill {
  id: ID!
  name: String!
  description: String!
  appearsIn(where: TradeWhereInput, orderBy: TradeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Trade!]
  possessedBy(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

type SkillConnection {
  pageInfo: PageInfo!
  edges: [SkillEdge]!
  aggregate: AggregateSkill!
}

input SkillCreateInput {
  id: ID
  name: String!
  description: String!
  appearsIn: TradeCreateManyWithoutSkillInput
  possessedBy: UserCreateManyWithoutSkillsInput
}

input SkillCreateManyWithoutPossessedByInput {
  create: [SkillCreateWithoutPossessedByInput!]
  connect: [SkillWhereUniqueInput!]
}

input SkillCreateOneWithoutAppearsInInput {
  create: SkillCreateWithoutAppearsInInput
  connect: SkillWhereUniqueInput
}

input SkillCreateWithoutAppearsInInput {
  id: ID
  name: String!
  description: String!
  possessedBy: UserCreateManyWithoutSkillsInput
}

input SkillCreateWithoutPossessedByInput {
  id: ID
  name: String!
  description: String!
  appearsIn: TradeCreateManyWithoutSkillInput
}

type SkillEdge {
  node: Skill!
  cursor: String!
}

enum SkillOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
}

type SkillPreviousValues {
  id: ID!
  name: String!
  description: String!
}

input SkillScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  AND: [SkillScalarWhereInput!]
  OR: [SkillScalarWhereInput!]
  NOT: [SkillScalarWhereInput!]
}

type SkillSubscriptionPayload {
  mutation: MutationType!
  node: Skill
  updatedFields: [String!]
  previousValues: SkillPreviousValues
}

input SkillSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SkillWhereInput
  AND: [SkillSubscriptionWhereInput!]
  OR: [SkillSubscriptionWhereInput!]
  NOT: [SkillSubscriptionWhereInput!]
}

input SkillUpdateInput {
  name: String
  description: String
  appearsIn: TradeUpdateManyWithoutSkillInput
  possessedBy: UserUpdateManyWithoutSkillsInput
}

input SkillUpdateManyDataInput {
  name: String
  description: String
}

input SkillUpdateManyMutationInput {
  name: String
  description: String
}

input SkillUpdateManyWithoutPossessedByInput {
  create: [SkillCreateWithoutPossessedByInput!]
  delete: [SkillWhereUniqueInput!]
  connect: [SkillWhereUniqueInput!]
  set: [SkillWhereUniqueInput!]
  disconnect: [SkillWhereUniqueInput!]
  update: [SkillUpdateWithWhereUniqueWithoutPossessedByInput!]
  upsert: [SkillUpsertWithWhereUniqueWithoutPossessedByInput!]
  deleteMany: [SkillScalarWhereInput!]
  updateMany: [SkillUpdateManyWithWhereNestedInput!]
}

input SkillUpdateManyWithWhereNestedInput {
  where: SkillScalarWhereInput!
  data: SkillUpdateManyDataInput!
}

input SkillUpdateOneRequiredWithoutAppearsInInput {
  create: SkillCreateWithoutAppearsInInput
  update: SkillUpdateWithoutAppearsInDataInput
  upsert: SkillUpsertWithoutAppearsInInput
  connect: SkillWhereUniqueInput
}

input SkillUpdateWithoutAppearsInDataInput {
  name: String
  description: String
  possessedBy: UserUpdateManyWithoutSkillsInput
}

input SkillUpdateWithoutPossessedByDataInput {
  name: String
  description: String
  appearsIn: TradeUpdateManyWithoutSkillInput
}

input SkillUpdateWithWhereUniqueWithoutPossessedByInput {
  where: SkillWhereUniqueInput!
  data: SkillUpdateWithoutPossessedByDataInput!
}

input SkillUpsertWithoutAppearsInInput {
  update: SkillUpdateWithoutAppearsInDataInput!
  create: SkillCreateWithoutAppearsInInput!
}

input SkillUpsertWithWhereUniqueWithoutPossessedByInput {
  where: SkillWhereUniqueInput!
  update: SkillUpdateWithoutPossessedByDataInput!
  create: SkillCreateWithoutPossessedByInput!
}

input SkillWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  appearsIn_every: TradeWhereInput
  appearsIn_some: TradeWhereInput
  appearsIn_none: TradeWhereInput
  possessedBy_every: UserWhereInput
  possessedBy_some: UserWhereInput
  possessedBy_none: UserWhereInput
  AND: [SkillWhereInput!]
  OR: [SkillWhereInput!]
  NOT: [SkillWhereInput!]
}

input SkillWhereUniqueInput {
  id: ID
  name: String
}

type Subscription {
  link(where: LinkSubscriptionWhereInput): LinkSubscriptionPayload
  rating(where: RatingSubscriptionWhereInput): RatingSubscriptionPayload
  skill(where: SkillSubscriptionWhereInput): SkillSubscriptionPayload
  trade(where: TradeSubscriptionWhereInput): TradeSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  vote(where: VoteSubscriptionWhereInput): VoteSubscriptionPayload
}

type Trade {
  id: ID!
  user: User!
  skill: Skill!
  trade: Trade!
}

type TradeConnection {
  pageInfo: PageInfo!
  edges: [TradeEdge]!
  aggregate: AggregateTrade!
}

input TradeCreateInput {
  id: ID
  user: UserCreateOneWithoutTradesInput!
  skill: SkillCreateOneWithoutAppearsInInput!
  trade: TradeCreateOneInput!
}

input TradeCreateManyWithoutSkillInput {
  create: [TradeCreateWithoutSkillInput!]
  connect: [TradeWhereUniqueInput!]
}

input TradeCreateManyWithoutUserInput {
  create: [TradeCreateWithoutUserInput!]
  connect: [TradeWhereUniqueInput!]
}

input TradeCreateOneInput {
  create: TradeCreateInput
  connect: TradeWhereUniqueInput
}

input TradeCreateWithoutSkillInput {
  id: ID
  user: UserCreateOneWithoutTradesInput!
  trade: TradeCreateOneInput!
}

input TradeCreateWithoutUserInput {
  id: ID
  skill: SkillCreateOneWithoutAppearsInInput!
  trade: TradeCreateOneInput!
}

type TradeEdge {
  node: Trade!
  cursor: String!
}

enum TradeOrderByInput {
  id_ASC
  id_DESC
}

type TradePreviousValues {
  id: ID!
}

input TradeScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  AND: [TradeScalarWhereInput!]
  OR: [TradeScalarWhereInput!]
  NOT: [TradeScalarWhereInput!]
}

type TradeSubscriptionPayload {
  mutation: MutationType!
  node: Trade
  updatedFields: [String!]
  previousValues: TradePreviousValues
}

input TradeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TradeWhereInput
  AND: [TradeSubscriptionWhereInput!]
  OR: [TradeSubscriptionWhereInput!]
  NOT: [TradeSubscriptionWhereInput!]
}

input TradeUpdateDataInput {
  user: UserUpdateOneRequiredWithoutTradesInput
  skill: SkillUpdateOneRequiredWithoutAppearsInInput
  trade: TradeUpdateOneRequiredInput
}

input TradeUpdateInput {
  user: UserUpdateOneRequiredWithoutTradesInput
  skill: SkillUpdateOneRequiredWithoutAppearsInInput
  trade: TradeUpdateOneRequiredInput
}

input TradeUpdateManyWithoutSkillInput {
  create: [TradeCreateWithoutSkillInput!]
  delete: [TradeWhereUniqueInput!]
  connect: [TradeWhereUniqueInput!]
  set: [TradeWhereUniqueInput!]
  disconnect: [TradeWhereUniqueInput!]
  update: [TradeUpdateWithWhereUniqueWithoutSkillInput!]
  upsert: [TradeUpsertWithWhereUniqueWithoutSkillInput!]
  deleteMany: [TradeScalarWhereInput!]
}

input TradeUpdateManyWithoutUserInput {
  create: [TradeCreateWithoutUserInput!]
  delete: [TradeWhereUniqueInput!]
  connect: [TradeWhereUniqueInput!]
  set: [TradeWhereUniqueInput!]
  disconnect: [TradeWhereUniqueInput!]
  update: [TradeUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [TradeUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [TradeScalarWhereInput!]
}

input TradeUpdateOneRequiredInput {
  create: TradeCreateInput
  update: TradeUpdateDataInput
  upsert: TradeUpsertNestedInput
  connect: TradeWhereUniqueInput
}

input TradeUpdateWithoutSkillDataInput {
  user: UserUpdateOneRequiredWithoutTradesInput
  trade: TradeUpdateOneRequiredInput
}

input TradeUpdateWithoutUserDataInput {
  skill: SkillUpdateOneRequiredWithoutAppearsInInput
  trade: TradeUpdateOneRequiredInput
}

input TradeUpdateWithWhereUniqueWithoutSkillInput {
  where: TradeWhereUniqueInput!
  data: TradeUpdateWithoutSkillDataInput!
}

input TradeUpdateWithWhereUniqueWithoutUserInput {
  where: TradeWhereUniqueInput!
  data: TradeUpdateWithoutUserDataInput!
}

input TradeUpsertNestedInput {
  update: TradeUpdateDataInput!
  create: TradeCreateInput!
}

input TradeUpsertWithWhereUniqueWithoutSkillInput {
  where: TradeWhereUniqueInput!
  update: TradeUpdateWithoutSkillDataInput!
  create: TradeCreateWithoutSkillInput!
}

input TradeUpsertWithWhereUniqueWithoutUserInput {
  where: TradeWhereUniqueInput!
  update: TradeUpdateWithoutUserDataInput!
  create: TradeCreateWithoutUserInput!
}

input TradeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  skill: SkillWhereInput
  trade: TradeWhereInput
  AND: [TradeWhereInput!]
  OR: [TradeWhereInput!]
  NOT: [TradeWhereInput!]
}

input TradeWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  ratings(where: RatingWhereInput, orderBy: RatingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Rating!]
  authorOf(where: RatingWhereInput, orderBy: RatingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Rating!]
  links(where: LinkWhereInput, orderBy: LinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Link!]
  skills(where: SkillWhereInput, orderBy: SkillOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Skill!]
  trades(where: TradeWhereInput, orderBy: TradeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Trade!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  password: String!
  ratings: RatingCreateManyWithoutSubjectInput
  authorOf: RatingCreateManyWithoutAuthorInput
  links: LinkCreateManyWithoutPostedByInput
  skills: SkillCreateManyWithoutPossessedByInput
  trades: TradeCreateManyWithoutUserInput
}

input UserCreateManyWithoutSkillsInput {
  create: [UserCreateWithoutSkillsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutAuthorOfInput {
  create: UserCreateWithoutAuthorOfInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutLinksInput {
  create: UserCreateWithoutLinksInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutRatingsInput {
  create: UserCreateWithoutRatingsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutTradesInput {
  create: UserCreateWithoutTradesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutAuthorOfInput {
  id: ID
  name: String!
  email: String!
  password: String!
  ratings: RatingCreateManyWithoutSubjectInput
  links: LinkCreateManyWithoutPostedByInput
  skills: SkillCreateManyWithoutPossessedByInput
  trades: TradeCreateManyWithoutUserInput
}

input UserCreateWithoutLinksInput {
  id: ID
  name: String!
  email: String!
  password: String!
  ratings: RatingCreateManyWithoutSubjectInput
  authorOf: RatingCreateManyWithoutAuthorInput
  skills: SkillCreateManyWithoutPossessedByInput
  trades: TradeCreateManyWithoutUserInput
}

input UserCreateWithoutRatingsInput {
  id: ID
  name: String!
  email: String!
  password: String!
  authorOf: RatingCreateManyWithoutAuthorInput
  links: LinkCreateManyWithoutPostedByInput
  skills: SkillCreateManyWithoutPossessedByInput
  trades: TradeCreateManyWithoutUserInput
}

input UserCreateWithoutSkillsInput {
  id: ID
  name: String!
  email: String!
  password: String!
  ratings: RatingCreateManyWithoutSubjectInput
  authorOf: RatingCreateManyWithoutAuthorInput
  links: LinkCreateManyWithoutPostedByInput
  trades: TradeCreateManyWithoutUserInput
}

input UserCreateWithoutTradesInput {
  id: ID
  name: String!
  email: String!
  password: String!
  ratings: RatingCreateManyWithoutSubjectInput
  authorOf: RatingCreateManyWithoutAuthorInput
  links: LinkCreateManyWithoutPostedByInput
  skills: SkillCreateManyWithoutPossessedByInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  name: String
  email: String
  password: String
  ratings: RatingUpdateManyWithoutSubjectInput
  authorOf: RatingUpdateManyWithoutAuthorInput
  links: LinkUpdateManyWithoutPostedByInput
  skills: SkillUpdateManyWithoutPossessedByInput
  trades: TradeUpdateManyWithoutUserInput
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  ratings: RatingUpdateManyWithoutSubjectInput
  authorOf: RatingUpdateManyWithoutAuthorInput
  links: LinkUpdateManyWithoutPostedByInput
  skills: SkillUpdateManyWithoutPossessedByInput
  trades: TradeUpdateManyWithoutUserInput
}

input UserUpdateManyDataInput {
  name: String
  email: String
  password: String
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
}

input UserUpdateManyWithoutSkillsInput {
  create: [UserCreateWithoutSkillsInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutSkillsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutSkillsInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutAuthorOfInput {
  create: UserCreateWithoutAuthorOfInput
  update: UserUpdateWithoutAuthorOfDataInput
  upsert: UserUpsertWithoutAuthorOfInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutRatingsInput {
  create: UserCreateWithoutRatingsInput
  update: UserUpdateWithoutRatingsDataInput
  upsert: UserUpsertWithoutRatingsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutTradesInput {
  create: UserCreateWithoutTradesInput
  update: UserUpdateWithoutTradesDataInput
  upsert: UserUpsertWithoutTradesInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutLinksInput {
  create: UserCreateWithoutLinksInput
  update: UserUpdateWithoutLinksDataInput
  upsert: UserUpsertWithoutLinksInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutAuthorOfDataInput {
  name: String
  email: String
  password: String
  ratings: RatingUpdateManyWithoutSubjectInput
  links: LinkUpdateManyWithoutPostedByInput
  skills: SkillUpdateManyWithoutPossessedByInput
  trades: TradeUpdateManyWithoutUserInput
}

input UserUpdateWithoutLinksDataInput {
  name: String
  email: String
  password: String
  ratings: RatingUpdateManyWithoutSubjectInput
  authorOf: RatingUpdateManyWithoutAuthorInput
  skills: SkillUpdateManyWithoutPossessedByInput
  trades: TradeUpdateManyWithoutUserInput
}

input UserUpdateWithoutRatingsDataInput {
  name: String
  email: String
  password: String
  authorOf: RatingUpdateManyWithoutAuthorInput
  links: LinkUpdateManyWithoutPostedByInput
  skills: SkillUpdateManyWithoutPossessedByInput
  trades: TradeUpdateManyWithoutUserInput
}

input UserUpdateWithoutSkillsDataInput {
  name: String
  email: String
  password: String
  ratings: RatingUpdateManyWithoutSubjectInput
  authorOf: RatingUpdateManyWithoutAuthorInput
  links: LinkUpdateManyWithoutPostedByInput
  trades: TradeUpdateManyWithoutUserInput
}

input UserUpdateWithoutTradesDataInput {
  name: String
  email: String
  password: String
  ratings: RatingUpdateManyWithoutSubjectInput
  authorOf: RatingUpdateManyWithoutAuthorInput
  links: LinkUpdateManyWithoutPostedByInput
  skills: SkillUpdateManyWithoutPossessedByInput
}

input UserUpdateWithWhereUniqueWithoutSkillsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutSkillsDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutAuthorOfInput {
  update: UserUpdateWithoutAuthorOfDataInput!
  create: UserCreateWithoutAuthorOfInput!
}

input UserUpsertWithoutLinksInput {
  update: UserUpdateWithoutLinksDataInput!
  create: UserCreateWithoutLinksInput!
}

input UserUpsertWithoutRatingsInput {
  update: UserUpdateWithoutRatingsDataInput!
  create: UserCreateWithoutRatingsInput!
}

input UserUpsertWithoutTradesInput {
  update: UserUpdateWithoutTradesDataInput!
  create: UserCreateWithoutTradesInput!
}

input UserUpsertWithWhereUniqueWithoutSkillsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutSkillsDataInput!
  create: UserCreateWithoutSkillsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  ratings_every: RatingWhereInput
  ratings_some: RatingWhereInput
  ratings_none: RatingWhereInput
  authorOf_every: RatingWhereInput
  authorOf_some: RatingWhereInput
  authorOf_none: RatingWhereInput
  links_every: LinkWhereInput
  links_some: LinkWhereInput
  links_none: LinkWhereInput
  skills_every: SkillWhereInput
  skills_some: SkillWhereInput
  skills_none: SkillWhereInput
  trades_every: TradeWhereInput
  trades_some: TradeWhereInput
  trades_none: TradeWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

type Vote {
  id: ID!
  user: User!
  link: Link!
}

type VoteConnection {
  pageInfo: PageInfo!
  edges: [VoteEdge]!
  aggregate: AggregateVote!
}

input VoteCreateInput {
  id: ID
  user: UserCreateOneInput!
  link: LinkCreateOneWithoutVotesInput!
}

input VoteCreateManyWithoutLinkInput {
  create: [VoteCreateWithoutLinkInput!]
  connect: [VoteWhereUniqueInput!]
}

input VoteCreateWithoutLinkInput {
  id: ID
  user: UserCreateOneInput!
}

type VoteEdge {
  node: Vote!
  cursor: String!
}

enum VoteOrderByInput {
  id_ASC
  id_DESC
}

type VotePreviousValues {
  id: ID!
}

input VoteScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  AND: [VoteScalarWhereInput!]
  OR: [VoteScalarWhereInput!]
  NOT: [VoteScalarWhereInput!]
}

type VoteSubscriptionPayload {
  mutation: MutationType!
  node: Vote
  updatedFields: [String!]
  previousValues: VotePreviousValues
}

input VoteSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: VoteWhereInput
  AND: [VoteSubscriptionWhereInput!]
  OR: [VoteSubscriptionWhereInput!]
  NOT: [VoteSubscriptionWhereInput!]
}

input VoteUpdateInput {
  user: UserUpdateOneRequiredInput
  link: LinkUpdateOneRequiredWithoutVotesInput
}

input VoteUpdateManyWithoutLinkInput {
  create: [VoteCreateWithoutLinkInput!]
  delete: [VoteWhereUniqueInput!]
  connect: [VoteWhereUniqueInput!]
  set: [VoteWhereUniqueInput!]
  disconnect: [VoteWhereUniqueInput!]
  update: [VoteUpdateWithWhereUniqueWithoutLinkInput!]
  upsert: [VoteUpsertWithWhereUniqueWithoutLinkInput!]
  deleteMany: [VoteScalarWhereInput!]
}

input VoteUpdateWithoutLinkDataInput {
  user: UserUpdateOneRequiredInput
}

input VoteUpdateWithWhereUniqueWithoutLinkInput {
  where: VoteWhereUniqueInput!
  data: VoteUpdateWithoutLinkDataInput!
}

input VoteUpsertWithWhereUniqueWithoutLinkInput {
  where: VoteWhereUniqueInput!
  update: VoteUpdateWithoutLinkDataInput!
  create: VoteCreateWithoutLinkInput!
}

input VoteWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  link: LinkWhereInput
  AND: [VoteWhereInput!]
  OR: [VoteWhereInput!]
  NOT: [VoteWhereInput!]
}

input VoteWhereUniqueInput {
  id: ID
}
`
      }
    